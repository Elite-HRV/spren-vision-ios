// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SprenCore
import AVFoundation
import Accelerate
import CommonCrypto
import CoreImage
import CoreMedia
import CoreVideo
import Foundation
import MetalPerformanceShaders
import Swift
import UIKit
import zlib
public struct Format {
  public let fps: Swift.Double
  public let size: Swift.Int32
  public let format: AVFoundation.AVCaptureDevice.Format
  public init(fps: Swift.Double, size: Swift.Int32, format: AVFoundation.AVCaptureDevice.Format)
}
public struct FormatIE {
  public let fps: Swift.Double
  public let iso: Swift.Float?
  public let exposure: CoreMedia.CMTime?
  public let format: AVFoundation.AVCaptureDevice.Format
  public init(fps: Swift.Double, iso: Swift.Float?, exposure: CoreMedia.CMTime?, format: AVFoundation.AVCaptureDevice.Format)
}
@_hasMissingDesignatedInitializers public class ComplianceCheck {
  public enum Name {
    case frameDrop
    case brightness
    case lensCoverage
    public static func == (a: SprenCore.ComplianceCheck.Name, b: SprenCore.ComplianceCheck.Name) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Action {
    case increase
    case decrease
    public static func == (a: SprenCore.ComplianceCheck.Action, b: SprenCore.ComplianceCheck.Action) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public enum SprenComplianceError : Swift.Error {
  case frameDropHigh
  case brightnessLow
  case brightnessHigh
  case lensCoverage
  public static func == (a: SprenCore.SprenComplianceError, b: SprenCore.SprenComplianceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Spren {
  public static var autoStart: Swift.Bool
  public static var readingDurationSeconds: Swift.Double {
    get
  }
  public static func process(frame: SprenCore.SprenFrame)
  public static func frameDropped()
  public static func getReadingData() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Test {
  public static func testMode()
  public static func getJsonString() -> Swift.String?
  public static func testFinished()
  @objc deinit
}
extension Spren {
  public static func setReadingDuration(duration: Swift.Int)
  public static func setOnPrereadingComplianceCheck(onPrereadingComplianceCheck: @escaping (SprenCore.ComplianceCheck.Name, Swift.Bool, SprenCore.ComplianceCheck.Action?) -> Swift.Void)
  public static func setOnProgressUpdate(onProgressUpdate: @escaping (Swift.Int) -> Swift.Void)
  public static func setOnStateChange(onStateChange: @escaping (SprenCore.SprenState, Swift.Error?) -> Swift.Void)
  public static func startReading()
  public static func cancelReading()
}
public enum SprenState {
  case started
  case finished
  case cancelled
  case error
  public static func == (a: SprenCore.SprenState, b: SprenCore.SprenState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SprenFrame {
  final public let sampleBuffer: CoreMedia.CMSampleBuffer
  public init(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int)
  @objc deinit
}
extension SprenCore.ComplianceCheck.Name : Swift.Equatable {}
extension SprenCore.ComplianceCheck.Name : Swift.Hashable {}
extension SprenCore.ComplianceCheck.Action : Swift.Equatable {}
extension SprenCore.ComplianceCheck.Action : Swift.Hashable {}
extension SprenCore.SprenComplianceError : Swift.Equatable {}
extension SprenCore.SprenComplianceError : Swift.Hashable {}
extension SprenCore.SprenState : Swift.Equatable {}
extension SprenCore.SprenState : Swift.Hashable {}
